syntax="proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "validate/validate.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/spv-dev/auth/pkg/user_v1;user_v1";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
        title: "Auth API"
        version: "1.0.0"
        contact: {
            name: "Pavel Simonov"
            email: "psjob@bk.ru"
        };
    };

    host: "localhost:8080",
    schemes: HTTP,
    schemes: HTTPS,
    consumes: "application/json",
    produces: "application/json",
};

service AuthV1 {
    // Создаёт нового пользователя
    rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {
        option (google.api.http) = {
            post: "/user/v1/create"
            body: "*"
        };
    }

    // Получает пользователя по идентификатору
    rpc GetUser(GetUserRequest) returns (GetUserResponse) {
        option (google.api.http) = {
            get: "/user/v1"
        };
    }

    // Изменяет пользователя
    rpc UpdateUser(UpdateUserRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            patch: "/user/v1"
            body: "*"
        };
    }

    // Удаляет пользователя
    rpc DeleteUser(DeleteUserRequest) returns (google.protobuf.Empty)  {
        option (google.api.http) = {
            delete: "/user/v1"
        };
    }
}

enum Roles {
    UNKNOWN = 0;
    ADMIN = 1;
    USER = 2;
}

message UserInfo {
    // Имя
    string name = 1 [(validate.rules).string = {min_len : 3}];
    // Электронная почта
    string email = 2 [(validate.rules).string.email = true];
    // Роль
    Roles role = 3;
}

message User {
    int64 id = 1;
    UserInfo info = 2;
    google.protobuf.Timestamp created_at = 3;
    google.protobuf.Timestamp updated_at = 4;
}

message UpdateUserInfo {
    google.protobuf.StringValue name = 1;
    Roles role = 2;
}

message CreateUserRequest {
    UserInfo info = 1;
    // Пароль
    string password = 2 [(validate.rules).string = {min_len : 8}];
    // Подтверждение пароля
    string password_confirm = 3 [(validate.rules).string = {min_len : 8}];
}

message CreateUserResponse {
    int64 id = 1;
}

message GetUserRequest {
    int64 id = 1;
}

message GetUserResponse {
    User user = 1;
}

message UpdateUserRequest {
    int64 id = 1;
    UpdateUserInfo info = 2;
}

message DeleteUserRequest {
    int64 id = 1;
}
